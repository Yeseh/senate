@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json;
@inject IHttpClientFactory _clientFactory 

<PageTitle>Index</PageTitle>

Welcome to your new app.

<h1>Invite a user</h1>

<InputText id="email" @bind-Value="inviteUserModel.Email"/>
<button @onclick="HandleSubmit">Invite User</button>
<select @bind="inviteUserModel.Permission">
    @foreach (var p in permissions)
    {
        <option value=@p>@p</option>
    }
</select>
<h2>@inviteMessage</h2>

<h1>Active Invites</h1>
<TableTemplate Items="activeInvites" Context="invite">
    <TableHeader>
        <th>Id</th>
        <th>Email</th>
        <th>Expiry</th>
        <th>Redeemed</th>
    </TableHeader>
    <RowTemplate>
            <td>@invite.Id</td>
            <td>@invite.Email</td>
            <td>@invite.Expiry</td>
            <td>@invite.Redeemed</td>
    </RowTemplate>
</TableTemplate>



@code {
    private InviteUserModel inviteUserModel = new();

    private List<InviteModel> activeInvites = new();

    private HttpClient? _client = null;

    private string[] permissions = new string[] { "read", "write", "read write" };

    private string inviteMessage = string.Empty;

    private async Task HandleSubmit()
    {
        try
        {
            var response = await _client!.PostAsync($"{_client.BaseAddress}auth/user?email={inviteUserModel.Email}&permission={inviteUserModel.Permission}", null);
            inviteMessage = await response.Content.ReadAsStringAsync();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            inviteMessage = "Error";
            ex.Redirect();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _client = _clientFactory.CreateClient("SenateAPI");
            //var invitesResult = await _client!.GetAsync($"{_client.BaseAddress}auth/invites");

            //if (invitesResult.IsSuccessStatusCode)
            //{
            //    activeInvites = JsonSerializer.Deserialize<List<InviteModel>>(invitesResult.Content.ReadAsStream());
            //}
        }
        catch (AccessTokenNotAvailableException ex)
        {
            inviteMessage = "Error";
            ex.Redirect();
        }
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}

